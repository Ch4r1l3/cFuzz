{
  "swagger": "2.0",
  "paths": {
    "/crash/{id}": {
      "get": {
        "description": "download crash by id",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "taskCrash"
        ],
        "summary": "download crash by id",
        "operationId": "downloadCrash",
        "parameters": [
          {
            "type": "integer",
            "description": "id of crash",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/deployment": {
      "get": {
        "description": "list all deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "list all deployment",
        "operationId": "listDeployment",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeploymentCombine"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "post": {
        "description": "create deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "create deployment",
        "operationId": "createDeployment",
        "parameters": [
          {
            "name": "DeploymentReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentReq"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/deployment/count": {
      "get": {
        "description": "count of deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "count of deployment",
        "operationId": "countDeployment",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CountResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/deployment/simplist": {
      "get": {
        "description": "simplification deployment, list all id, name of deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "simplification list of deployment",
        "operationId": "simlistDeployment",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/DeploymentCombine"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/deployment/{id}": {
      "get": {
        "description": "retrieve deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "retrieve deployment",
        "operationId": "retrieveDeployment",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "put": {
        "description": "update deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "update deployment",
        "operationId": "updateDeployment",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "DeploymentReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentReq"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "delete": {
        "description": "delete deployment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "deployment"
        ],
        "summary": "delete deployment",
        "operationId": "deleteDeployment",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "schema": {
              "$ref": "#/definitions/Deployment"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/storage_item": {
      "get": {
        "description": "list storageItem",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "list storageItem",
        "operationId": "listStorageItem",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageItem"
              }
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "post": {
        "description": "create storageItem",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "create storageItem",
        "operationId": "createStorageItem",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "if upload file is zip and type is not corpus, this field specefiy the path of file like target",
            "name": "relPath",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/StorageItem"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/storage_item/count": {
      "get": {
        "description": "count of storageItem",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "count of storageItem",
        "operationId": "countStorageItem",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CountResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/storage_item/exist": {
      "post": {
        "description": "create exist storageItem",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "create exist storageItem",
        "operationId": "createExistStorageItem",
        "parameters": [
          {
            "name": "storageItemExistReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageItemExistReq"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/StorageItem"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/storage_item/{id}": {
      "delete": {
        "description": "delete storageItem",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "delete storageItem",
        "operationId": "deleteStorageItem",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StorageItem"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/storage_item/{type}": {
      "get": {
        "description": "list storageItem by type",
        "produces": [
          "application/json"
        ],
        "tags": [
          "storageItem"
        ],
        "summary": "list storageItem by type",
        "operationId": "listStorageItemByType",
        "parameters": [
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StorageItem"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task": {
      "get": {
        "description": "list tasks",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "list tasks",
        "operationId": "listTask",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskResp"
              }
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "post": {
        "description": "create task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "create task",
        "operationId": "createTask",
        "parameters": [
          {
            "name": "taskCreateReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCreateReq"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/TaskResp"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/count": {
      "get": {
        "description": "count of task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "count of task",
        "operationId": "countTask",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CountResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/{id}": {
      "get": {
        "description": "retrieve task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "retrieve task",
        "operationId": "retrieveTask",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TaskResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "put": {
        "description": "update task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "update task",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "taskUpdateReq",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskUpdateReq"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "update task success"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "delete": {
        "description": "delete task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "delete task",
        "operationId": "deleteTask",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "update task success"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/{id}/start": {
      "post": {
        "description": "start task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "start task",
        "operationId": "startTask",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "start task success"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/{id}/stop": {
      "post": {
        "description": "stop task",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "stop task",
        "operationId": "stopTask",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "stop task success"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/{taskID}/crash": {
      "get": {
        "description": "list all crashes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "taskCrash"
        ],
        "summary": "list all crashes",
        "operationId": "listTaskCrash",
        "parameters": [
          {
            "type": "integer",
            "name": "taskID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TaskCrashListResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/task/{taskID}/result": {
      "get": {
        "description": "retrieve task result",
        "produces": [
          "application/json"
        ],
        "tags": [
          "taskResult"
        ],
        "summary": "retrieve task result",
        "operationId": "retrieveTaskResult",
        "parameters": [
          {
            "type": "integer",
            "name": "taskID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TaskResultResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "list user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "list user",
        "operationId": "listUser",
        "responses": {
          "202": {
            "schema": {
              "$ref": "#/definitions/UserListResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      },
      "post": {
        "description": "create user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "create user",
        "operationId": "createUser",
        "responses": {
          "202": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/user/info": {
      "get": {
        "description": "get current user status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "get current user status",
        "operationId": "userStatus",
        "responses": {
          "202": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "description": "user Login",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "user Login",
        "operationId": "userLogin",
        "responses": {
          "202": {
            "schema": {
              "$ref": "#/definitions/LoginResp"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "description": "user Logout",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "user Logout",
        "operationId": "userLogout",
        "responses": {
          "200": {
            "description": "logout"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "description": "delete user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "delete user",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrResp"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountResp": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content",
          "example": "123"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test-image"
        },
        "userID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UserID",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "DeploymentCombine": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deployment"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "DeploymentReq": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content",
          "example": "123"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test-image"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "ErrResp": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error",
          "example": "some error"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/utils"
    },
    "LoginResp": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token",
          "example": "111xxxx"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "StorageItem": {
      "description": "item that record some file info",
      "type": "object",
      "properties": {
        "existsInImage": {
          "type": "boolean",
          "x-go-name": "ExistsInImage",
          "example": true
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "afl"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "relPath": {
          "description": "if upload file is zip and type is not corpus, this field specefiy the path of file like target",
          "type": "string",
          "x-go-name": "RelPath",
          "example": "test/target"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "fuzzer"
        },
        "userID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UserID",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "StorageItemCombine": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StorageItem"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "StorageItemExistReq": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "afl"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path",
          "example": "/tmp/afl/123"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "fuzzer"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "Task": {
      "type": "object",
      "properties": {
        "corpusID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CorpusID",
          "example": 2
        },
        "deploymentID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DeploymentID",
          "example": 1
        },
        "errorMsg": {
          "type": "string",
          "x-go-name": "ErrorMsg",
          "example": "pull image error"
        },
        "fuzzCycleTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzCycleTime",
          "example": 60
        },
        "fuzzerID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzerID",
          "example": 1
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "image": {
          "type": "string",
          "x-go-name": "Image",
          "example": "test-image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartedAt",
          "example": 1579996805
        },
        "status": {
          "type": "string",
          "x-go-name": "Status",
          "example": "TaskRunning"
        },
        "targetID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetID",
          "example": 3
        },
        "time": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Time",
          "example": 60
        },
        "userID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UserID",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "TaskCrash": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string",
          "x-go-name": "FileName",
          "example": "xxxxx"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "reproduceAble": {
          "type": "boolean",
          "x-go-name": "ReproduceAble",
          "example": true
        },
        "taskid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TaskID",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "TaskCrashListResp": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskCrash"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "TaskCreateReq": {
      "type": "object",
      "required": [
        "name",
        "time",
        "fuzzCycleTime"
      ],
      "properties": {
        "arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Arguments",
          "example": {
            "MEMORY_LIMIT": "100"
          }
        },
        "corpusID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CorpusID",
          "example": 2
        },
        "deploymentID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DeploymentID",
          "example": 1
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Environments",
          "example": [
            "AFL_FUZZ=1",
            "ASAN=1"
          ]
        },
        "fuzzCycleTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzCycleTime",
          "example": 60
        },
        "fuzzerID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzerID",
          "example": 1
        },
        "image": {
          "type": "string",
          "x-go-name": "Image",
          "example": "afl-image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test"
        },
        "targetID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetID",
          "example": 3
        },
        "time": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Time",
          "example": 3600
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "TaskFuzzResult": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "x-go-name": "Command",
          "example": "/afl/afl-fuzz -i xx -o xx ./test"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "taskid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TaskID",
          "example": 1
        },
        "timeExecuted": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeExecuted",
          "example": 60
        },
        "updateAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdateAt",
          "example": 1579996805
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "TaskResp": {
      "type": "object",
      "properties": {
        "arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Arguments",
          "example": {
            "MEMORY_LIMIT": "100"
          }
        },
        "corpusID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CorpusID",
          "example": 2
        },
        "crashNum": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CrashNum",
          "example": 1
        },
        "deploymentID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DeploymentID",
          "example": 1
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Environments",
          "example": [
            "AFL_FUZZ=1",
            "ASAN=1"
          ]
        },
        "errorMsg": {
          "type": "string",
          "x-go-name": "ErrorMsg",
          "example": "pull image error"
        },
        "fuzzCycleTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzCycleTime",
          "example": 60
        },
        "fuzzerID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzerID",
          "example": 1
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "image": {
          "type": "string",
          "x-go-name": "Image",
          "example": "test-image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StartedAt",
          "example": 1579996805
        },
        "status": {
          "type": "string",
          "x-go-name": "Status",
          "example": "TaskRunning"
        },
        "targetID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetID",
          "example": 3
        },
        "time": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Time",
          "example": 60
        },
        "userID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "UserID",
          "example": 1
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "TaskResultResp": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "x-go-name": "Command",
          "example": "/afl/afl-fuzz -i xx -o xx ./test"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID",
          "example": 1
        },
        "stats": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Stats",
          "example": {
            "crashes": "1"
          }
        },
        "taskid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TaskID",
          "example": 1
        },
        "timeExecuted": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeExecuted",
          "example": 60
        },
        "updateAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdateAt",
          "example": 1579996805
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "TaskUpdateReq": {
      "type": "object",
      "properties": {
        "arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Arguments",
          "example": {
            "MEMORY_LIMIT": "100"
          }
        },
        "corpusID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CorpusID",
          "example": 2
        },
        "deploymentID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "DeploymentID",
          "example": 1
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Environments",
          "example": [
            "AFL_FUZZ=1",
            "ASAN=1"
          ]
        },
        "fuzzCycleTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzCycleTime",
          "example": 60
        },
        "fuzzerID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "FuzzerID",
          "example": 1
        },
        "image": {
          "type": "string",
          "x-go-name": "Image",
          "example": "afl-image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "test"
        },
        "targetID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TargetID",
          "example": 3
        },
        "time": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Time",
          "example": 3600
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "isAdmin": {
          "type": "boolean",
          "x-go-name": "IsAdmin",
          "example": true
        },
        "username": {
          "type": "string",
          "x-go-name": "Username",
          "example": "123"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/models"
    },
    "UserListResp": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "UserReq": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password",
          "example": "1233"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username",
          "example": "123"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    },
    "UserUpdateReq": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string",
          "x-go-name": "NewPassword",
          "example": "123456"
        },
        "oldPassword": {
          "type": "string",
          "x-go-name": "OldPassword",
          "example": "1233445"
        }
      },
      "x-go-package": "github.com/Ch4r1l3/cFuzz/master/server/controller"
    }
  }
}